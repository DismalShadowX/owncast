// Package handlers provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package handlers

import (
	"context"
	"fmt"
	"net/http"

	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return all the valid access tokens.
	// (GET /api/admin/accesstokens)
	GetApiAdminAccesstokens(w http.ResponseWriter, r *http.Request)
	// Create a new user access token
	// (POST /api/admin/accesstokens/create)
	PostApiAdminAccesstokensCreate(w http.ResponseWriter, r *http.Request)
	// Delete a single access token
	// (POST /api/admin/accesstokens/delete)
	PostApiAdminAccesstokensDelete(w http.ResponseWriter, r *http.Request)
	// Currently connected chat clients
	// (GET /api/admin/chat/clients)
	GetApiAdminChatClients(w http.ResponseWriter, r *http.Request)
	// All chat messages
	// (GET /api/admin/chat/messages)
	GetApiAdminChatMessages(w http.ResponseWriter, r *http.Request)
	// Change message visibility
	// (POST /api/admin/chat/messagevisibility)
	PostApiAdminChatMessagevisibility(w http.ResponseWriter, r *http.Request)

	// (GET /api/admin/chat/users/disabled)
	GetApiAdminChatUsersDisabled(w http.ResponseWriter, r *http.Request)
	// IP address bans
	// (GET /api/admin/chat/users/ipbans)
	GetApiAdminChatUsersIpbans(w http.ResponseWriter, r *http.Request)
	// Ban IP Address from chat
	// (POST /api/admin/chat/users/ipbans/create)
	PostApiAdminChatUsersIpbansCreate(w http.ResponseWriter, r *http.Request)
	// Delete chat IP address ban
	// (POST /api/admin/chat/users/ipbans/remove)
	PostApiAdminChatUsersIpbansRemove(w http.ResponseWriter, r *http.Request)
	// Return the list of chat moderators
	// (GET /api/admin/chat/users/moderators)
	GetApiAdminChatUsersModerators(w http.ResponseWriter, r *http.Request)
	// Enable or disable a user
	// (POST /api/admin/chat/users/setenabled)
	PostApiAdminChatUsersSetenabled(w http.ResponseWriter, r *http.Request)
	// Add or remove chat moderator rights for a single user
	// (POST /api/admin/chat/users/setmoderator)
	PostApiAdminChatUsersSetmoderator(w http.ResponseWriter, r *http.Request)
	// Set admin password
	// (POST /api/admin/config/adminpass)
	PostApiAdminConfigAdminpass(w http.ResponseWriter, r *http.Request)
	// An object with appearance variables and values
	// (POST /api/admin/config/appearance)
	PostApiAdminConfigAppearance(w http.ResponseWriter, r *http.Request)
	// Disable or re-enable chat functionality
	// (POST /api/admin/config/chat/disable)
	PostApiAdminConfigChatDisable(w http.ResponseWriter, r *http.Request)
	// Enable or disable established chat user mode
	// (POST /api/admin/config/chat/establishedusermode)
	PostApiAdminConfigChatEstablishedusermode(w http.ResponseWriter, r *http.Request)
	// Save a list of chat user display names that are forbidden
	// (POST /api/admin/config/chat/forbiddenusernames)
	PostApiAdminConfigChatForbiddenusernames(w http.ResponseWriter, r *http.Request)
	// Enable or disable chat join messages
	// (POST /api/admin/config/chat/joinmessagesenabled)
	PostApiAdminConfigChatJoinmessagesenabled(w http.ResponseWriter, r *http.Request)
	// Provide a list of default chat user display names
	// (POST /api/admin/config/chat/suggestedusernames)
	PostApiAdminConfigChatSuggestedusernames(w http.ResponseWriter, r *http.Request)
	// Specify if this Owncast instance should be listed in the optional directory.
	// (POST /api/admin/config/directoryenabled)
	PostApiAdminConfigDirectoryenabled(w http.ResponseWriter, r *http.Request)
	// Update the path to the copy of ffmpeg you choose to use
	// (POST /api/admin/config/ffmpegpath)
	PostApiAdminConfigFfmpegpath(w http.ResponseWriter, r *http.Request)
	// Base64 encoded image data to use as the logo
	// (POST /api/admin/config/logo)
	PostApiAdminConfigLogo(w http.ResponseWriter, r *http.Request)
	// Set server name
	// (POST /api/admin/config/name)
	PostApiAdminConfigName(w http.ResponseWriter, r *http.Request)
	// Specify if this server should be seen as Not Safe For Work.
	// (POST /api/admin/config/nsfw)
	PostApiAdminConfigNsfw(w http.ResponseWriter, r *http.Request)
	// Set the message displayed when offline
	// (POST /api/admin/config/offlinemessage)
	PostApiAdminConfigOfflinemessage(w http.ResponseWriter, r *http.Request)
	// Update custom page content
	// (POST /api/admin/config/pagecontent)
	PostApiAdminConfigPagecontent(w http.ResponseWriter, r *http.Request)
	// Set the port you wish the RTMP service to listen on.
	// (POST /api/admin/config/rtmpserverport)
	PostApiAdminConfigRtmpserverport(w http.ResponseWriter, r *http.Request)
	// Set server summary
	// (POST /api/admin/config/serversummary)
	PostApiAdminConfigServersummary(w http.ResponseWriter, r *http.Request)
	// Provide an array of social handle objects to set these links.
	// (POST /api/admin/config/socialhandles)
	PostApiAdminConfigSocialhandles(w http.ResponseWriter, r *http.Request)
	// Update what the web interface will use as the websocket location.
	// (POST /api/admin/config/sockethostoverride)
	PostApiAdminConfigSockethostoverride(w http.ResponseWriter, r *http.Request)
	// Set the valid stream keys
	// (POST /api/admin/config/streamkeys)
	PostApiAdminConfigStreamkeys(w http.ResponseWriter, r *http.Request)
	// Set optional stream title
	// (POST /api/admin/config/streamtitle)
	PostApiAdminConfigStreamtitle(w http.ResponseWriter, r *http.Request)
	// Set the tags used and displayed with this server.
	// (POST /api/admin/config/tags)
	PostApiAdminConfigTags(w http.ResponseWriter, r *http.Request)
	// Set the video encoding codec used
	// (POST /api/admin/config/video/codec)
	PostApiAdminConfigVideoCodec(w http.ResponseWriter, r *http.Request)
	// Set the stream latency level
	// (POST /api/admin/config/video/streamlatencylevel)
	PostApiAdminConfigVideoStreamlatencylevel(w http.ResponseWriter, r *http.Request)
	// Save the detailed configuration of video processing and output
	// (POST /api/admin/config/video/streamoutputvariants)
	PostApiAdminConfigVideoStreamoutputvariants(w http.ResponseWriter, r *http.Request)
	// Update the location video should be served from.
	// (POST /api/admin/config/videoservingendpoint)
	PostApiAdminConfigVideoservingendpoint(w http.ResponseWriter, r *http.Request)
	// Set the IP/interface that Owncast webserver should listen on
	// (POST /api/admin/config/webserverip)
	PostApiAdminConfigWebserverip(w http.ResponseWriter, r *http.Request)
	// Set the port the Owncast web services should listen on
	// (POST /api/admin/config/webserverport)
	PostApiAdminConfigWebserverport(w http.ResponseWriter, r *http.Request)
	// Set the optional chat welcome message
	// (POST /api/admin/config/welcomemessage)
	PostApiAdminConfigWelcomemessage(w http.ResponseWriter, r *http.Request)
	// Disconnect streamer
	// (POST /api/admin/disconnect)
	PostApiAdminDisconnect(w http.ResponseWriter, r *http.Request)
	// Delete a single custom chat emoji image
	// (POST /api/admin/emoji/delete)
	PostApiAdminEmojiDelete(w http.ResponseWriter, r *http.Request)
	// Upload a new custom chat emoji image
	// (POST /api/admin/emoji/upload)
	PostApiAdminEmojiUpload(w http.ResponseWriter, r *http.Request)
	// Return a list of Fediverse followers
	// (GET /api/admin/followers)
	GetApiAdminFollowers(w http.ResponseWriter, r *http.Request)
	// Approve or deny a pending Fediverse follow request
	// (POST /api/admin/followers/approve)
	PostApiAdminFollowersApprove(w http.ResponseWriter, r *http.Request)
	// Return a list of blocked or rejected Fediverse follows
	// (GET /api/admin/followers/blocked)
	GetApiAdminFollowersBlocked(w http.ResponseWriter, r *http.Request)
	// Return a list of pending follows that need to be approved.
	// (GET /api/admin/followers/pending)
	GetApiAdminFollowersPending(w http.ResponseWriter, r *http.Request)
	// Hardware utilization statistics
	// (GET /api/admin/hardwarestats)
	GetApiAdminHardwarestats(w http.ResponseWriter, r *http.Request)
	// All server logs
	// (GET /api/admin/logs)
	GetApiAdminLogs(w http.ResponseWriter, r *http.Request)
	// Warning and error logs
	// (GET /api/admin/logs/warnings)
	GetApiAdminLogsWarnings(w http.ResponseWriter, r *http.Request)
	// Server configuration
	// (GET /api/admin/serverconfig)
	GetApiAdminServerconfig(w http.ResponseWriter, r *http.Request)
	// Get list of current viewers
	// (GET /api/admin/viewers)
	GetApiAdminViewers(w http.ResponseWriter, r *http.Request)
	// Historical viewer count over time
	// (GET /api/admin/viewersOverTime)
	GetApiAdminViewersOverTime(w http.ResponseWriter, r *http.Request)
	// Return the list of currently active webhooks
	// (GET /api/admin/webhooks)
	GetApiAdminWebhooks(w http.ResponseWriter, r *http.Request)
	// Create a new webhook for specific events
	// (POST /api/admin/webhooks/create)
	PostApiAdminWebhooksCreate(w http.ResponseWriter, r *http.Request)
	// Delete single webhook by ID
	// (POST /api/admin/webhooks/delete)
	PostApiAdminWebhooksDelete(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Return all the valid access tokens.
// (GET /api/admin/accesstokens)
func (_ Unimplemented) GetApiAdminAccesstokens(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new user access token
// (POST /api/admin/accesstokens/create)
func (_ Unimplemented) PostApiAdminAccesstokensCreate(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a single access token
// (POST /api/admin/accesstokens/delete)
func (_ Unimplemented) PostApiAdminAccesstokensDelete(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Currently connected chat clients
// (GET /api/admin/chat/clients)
func (_ Unimplemented) GetApiAdminChatClients(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// All chat messages
// (GET /api/admin/chat/messages)
func (_ Unimplemented) GetApiAdminChatMessages(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Change message visibility
// (POST /api/admin/chat/messagevisibility)
func (_ Unimplemented) PostApiAdminChatMessagevisibility(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /api/admin/chat/users/disabled)
func (_ Unimplemented) GetApiAdminChatUsersDisabled(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// IP address bans
// (GET /api/admin/chat/users/ipbans)
func (_ Unimplemented) GetApiAdminChatUsersIpbans(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Ban IP Address from chat
// (POST /api/admin/chat/users/ipbans/create)
func (_ Unimplemented) PostApiAdminChatUsersIpbansCreate(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete chat IP address ban
// (POST /api/admin/chat/users/ipbans/remove)
func (_ Unimplemented) PostApiAdminChatUsersIpbansRemove(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Return the list of chat moderators
// (GET /api/admin/chat/users/moderators)
func (_ Unimplemented) GetApiAdminChatUsersModerators(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Enable or disable a user
// (POST /api/admin/chat/users/setenabled)
func (_ Unimplemented) PostApiAdminChatUsersSetenabled(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add or remove chat moderator rights for a single user
// (POST /api/admin/chat/users/setmoderator)
func (_ Unimplemented) PostApiAdminChatUsersSetmoderator(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Set admin password
// (POST /api/admin/config/adminpass)
func (_ Unimplemented) PostApiAdminConfigAdminpass(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// An object with appearance variables and values
// (POST /api/admin/config/appearance)
func (_ Unimplemented) PostApiAdminConfigAppearance(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Disable or re-enable chat functionality
// (POST /api/admin/config/chat/disable)
func (_ Unimplemented) PostApiAdminConfigChatDisable(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Enable or disable established chat user mode
// (POST /api/admin/config/chat/establishedusermode)
func (_ Unimplemented) PostApiAdminConfigChatEstablishedusermode(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Save a list of chat user display names that are forbidden
// (POST /api/admin/config/chat/forbiddenusernames)
func (_ Unimplemented) PostApiAdminConfigChatForbiddenusernames(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Enable or disable chat join messages
// (POST /api/admin/config/chat/joinmessagesenabled)
func (_ Unimplemented) PostApiAdminConfigChatJoinmessagesenabled(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Provide a list of default chat user display names
// (POST /api/admin/config/chat/suggestedusernames)
func (_ Unimplemented) PostApiAdminConfigChatSuggestedusernames(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Specify if this Owncast instance should be listed in the optional directory.
// (POST /api/admin/config/directoryenabled)
func (_ Unimplemented) PostApiAdminConfigDirectoryenabled(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update the path to the copy of ffmpeg you choose to use
// (POST /api/admin/config/ffmpegpath)
func (_ Unimplemented) PostApiAdminConfigFfmpegpath(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Base64 encoded image data to use as the logo
// (POST /api/admin/config/logo)
func (_ Unimplemented) PostApiAdminConfigLogo(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Set server name
// (POST /api/admin/config/name)
func (_ Unimplemented) PostApiAdminConfigName(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Specify if this server should be seen as Not Safe For Work.
// (POST /api/admin/config/nsfw)
func (_ Unimplemented) PostApiAdminConfigNsfw(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Set the message displayed when offline
// (POST /api/admin/config/offlinemessage)
func (_ Unimplemented) PostApiAdminConfigOfflinemessage(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update custom page content
// (POST /api/admin/config/pagecontent)
func (_ Unimplemented) PostApiAdminConfigPagecontent(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Set the port you wish the RTMP service to listen on.
// (POST /api/admin/config/rtmpserverport)
func (_ Unimplemented) PostApiAdminConfigRtmpserverport(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Set server summary
// (POST /api/admin/config/serversummary)
func (_ Unimplemented) PostApiAdminConfigServersummary(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Provide an array of social handle objects to set these links.
// (POST /api/admin/config/socialhandles)
func (_ Unimplemented) PostApiAdminConfigSocialhandles(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update what the web interface will use as the websocket location.
// (POST /api/admin/config/sockethostoverride)
func (_ Unimplemented) PostApiAdminConfigSockethostoverride(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Set the valid stream keys
// (POST /api/admin/config/streamkeys)
func (_ Unimplemented) PostApiAdminConfigStreamkeys(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Set optional stream title
// (POST /api/admin/config/streamtitle)
func (_ Unimplemented) PostApiAdminConfigStreamtitle(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Set the tags used and displayed with this server.
// (POST /api/admin/config/tags)
func (_ Unimplemented) PostApiAdminConfigTags(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Set the video encoding codec used
// (POST /api/admin/config/video/codec)
func (_ Unimplemented) PostApiAdminConfigVideoCodec(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Set the stream latency level
// (POST /api/admin/config/video/streamlatencylevel)
func (_ Unimplemented) PostApiAdminConfigVideoStreamlatencylevel(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Save the detailed configuration of video processing and output
// (POST /api/admin/config/video/streamoutputvariants)
func (_ Unimplemented) PostApiAdminConfigVideoStreamoutputvariants(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update the location video should be served from.
// (POST /api/admin/config/videoservingendpoint)
func (_ Unimplemented) PostApiAdminConfigVideoservingendpoint(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Set the IP/interface that Owncast webserver should listen on
// (POST /api/admin/config/webserverip)
func (_ Unimplemented) PostApiAdminConfigWebserverip(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Set the port the Owncast web services should listen on
// (POST /api/admin/config/webserverport)
func (_ Unimplemented) PostApiAdminConfigWebserverport(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Set the optional chat welcome message
// (POST /api/admin/config/welcomemessage)
func (_ Unimplemented) PostApiAdminConfigWelcomemessage(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Disconnect streamer
// (POST /api/admin/disconnect)
func (_ Unimplemented) PostApiAdminDisconnect(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a single custom chat emoji image
// (POST /api/admin/emoji/delete)
func (_ Unimplemented) PostApiAdminEmojiDelete(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Upload a new custom chat emoji image
// (POST /api/admin/emoji/upload)
func (_ Unimplemented) PostApiAdminEmojiUpload(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Return a list of Fediverse followers
// (GET /api/admin/followers)
func (_ Unimplemented) GetApiAdminFollowers(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Approve or deny a pending Fediverse follow request
// (POST /api/admin/followers/approve)
func (_ Unimplemented) PostApiAdminFollowersApprove(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Return a list of blocked or rejected Fediverse follows
// (GET /api/admin/followers/blocked)
func (_ Unimplemented) GetApiAdminFollowersBlocked(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Return a list of pending follows that need to be approved.
// (GET /api/admin/followers/pending)
func (_ Unimplemented) GetApiAdminFollowersPending(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Hardware utilization statistics
// (GET /api/admin/hardwarestats)
func (_ Unimplemented) GetApiAdminHardwarestats(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// All server logs
// (GET /api/admin/logs)
func (_ Unimplemented) GetApiAdminLogs(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Warning and error logs
// (GET /api/admin/logs/warnings)
func (_ Unimplemented) GetApiAdminLogsWarnings(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Server configuration
// (GET /api/admin/serverconfig)
func (_ Unimplemented) GetApiAdminServerconfig(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get list of current viewers
// (GET /api/admin/viewers)
func (_ Unimplemented) GetApiAdminViewers(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Historical viewer count over time
// (GET /api/admin/viewersOverTime)
func (_ Unimplemented) GetApiAdminViewersOverTime(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Return the list of currently active webhooks
// (GET /api/admin/webhooks)
func (_ Unimplemented) GetApiAdminWebhooks(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new webhook for specific events
// (POST /api/admin/webhooks/create)
func (_ Unimplemented) PostApiAdminWebhooksCreate(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete single webhook by ID
// (POST /api/admin/webhooks/delete)
func (_ Unimplemented) PostApiAdminWebhooksDelete(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetApiAdminAccesstokens operation middleware
func (siw *ServerInterfaceWrapper) GetApiAdminAccesstokens(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, AdminScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiAdminAccesstokens(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiAdminAccesstokensCreate operation middleware
func (siw *ServerInterfaceWrapper) PostApiAdminAccesstokensCreate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, AdminScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiAdminAccesstokensCreate(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiAdminAccesstokensDelete operation middleware
func (siw *ServerInterfaceWrapper) PostApiAdminAccesstokensDelete(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, AdminScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiAdminAccesstokensDelete(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiAdminChatClients operation middleware
func (siw *ServerInterfaceWrapper) GetApiAdminChatClients(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, AdminScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiAdminChatClients(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiAdminChatMessages operation middleware
func (siw *ServerInterfaceWrapper) GetApiAdminChatMessages(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, AdminScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiAdminChatMessages(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiAdminChatMessagevisibility operation middleware
func (siw *ServerInterfaceWrapper) PostApiAdminChatMessagevisibility(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, AdminScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiAdminChatMessagevisibility(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiAdminChatUsersDisabled operation middleware
func (siw *ServerInterfaceWrapper) GetApiAdminChatUsersDisabled(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, AdminScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiAdminChatUsersDisabled(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiAdminChatUsersIpbans operation middleware
func (siw *ServerInterfaceWrapper) GetApiAdminChatUsersIpbans(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, AdminScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiAdminChatUsersIpbans(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiAdminChatUsersIpbansCreate operation middleware
func (siw *ServerInterfaceWrapper) PostApiAdminChatUsersIpbansCreate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, AdminScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiAdminChatUsersIpbansCreate(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiAdminChatUsersIpbansRemove operation middleware
func (siw *ServerInterfaceWrapper) PostApiAdminChatUsersIpbansRemove(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, AdminScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiAdminChatUsersIpbansRemove(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiAdminChatUsersModerators operation middleware
func (siw *ServerInterfaceWrapper) GetApiAdminChatUsersModerators(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, AdminScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiAdminChatUsersModerators(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiAdminChatUsersSetenabled operation middleware
func (siw *ServerInterfaceWrapper) PostApiAdminChatUsersSetenabled(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, AdminScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiAdminChatUsersSetenabled(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiAdminChatUsersSetmoderator operation middleware
func (siw *ServerInterfaceWrapper) PostApiAdminChatUsersSetmoderator(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, AdminScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiAdminChatUsersSetmoderator(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiAdminConfigAdminpass operation middleware
func (siw *ServerInterfaceWrapper) PostApiAdminConfigAdminpass(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, AdminScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiAdminConfigAdminpass(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiAdminConfigAppearance operation middleware
func (siw *ServerInterfaceWrapper) PostApiAdminConfigAppearance(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, AdminScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiAdminConfigAppearance(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiAdminConfigChatDisable operation middleware
func (siw *ServerInterfaceWrapper) PostApiAdminConfigChatDisable(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, AdminScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiAdminConfigChatDisable(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiAdminConfigChatEstablishedusermode operation middleware
func (siw *ServerInterfaceWrapper) PostApiAdminConfigChatEstablishedusermode(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, AdminScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiAdminConfigChatEstablishedusermode(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiAdminConfigChatForbiddenusernames operation middleware
func (siw *ServerInterfaceWrapper) PostApiAdminConfigChatForbiddenusernames(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, AdminScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiAdminConfigChatForbiddenusernames(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiAdminConfigChatJoinmessagesenabled operation middleware
func (siw *ServerInterfaceWrapper) PostApiAdminConfigChatJoinmessagesenabled(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, AdminScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiAdminConfigChatJoinmessagesenabled(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiAdminConfigChatSuggestedusernames operation middleware
func (siw *ServerInterfaceWrapper) PostApiAdminConfigChatSuggestedusernames(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, AdminScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiAdminConfigChatSuggestedusernames(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiAdminConfigDirectoryenabled operation middleware
func (siw *ServerInterfaceWrapper) PostApiAdminConfigDirectoryenabled(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, AdminScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiAdminConfigDirectoryenabled(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiAdminConfigFfmpegpath operation middleware
func (siw *ServerInterfaceWrapper) PostApiAdminConfigFfmpegpath(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, AdminScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiAdminConfigFfmpegpath(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiAdminConfigLogo operation middleware
func (siw *ServerInterfaceWrapper) PostApiAdminConfigLogo(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, AdminScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiAdminConfigLogo(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiAdminConfigName operation middleware
func (siw *ServerInterfaceWrapper) PostApiAdminConfigName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, AdminScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiAdminConfigName(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiAdminConfigNsfw operation middleware
func (siw *ServerInterfaceWrapper) PostApiAdminConfigNsfw(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, AdminScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiAdminConfigNsfw(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiAdminConfigOfflinemessage operation middleware
func (siw *ServerInterfaceWrapper) PostApiAdminConfigOfflinemessage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, AdminScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiAdminConfigOfflinemessage(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiAdminConfigPagecontent operation middleware
func (siw *ServerInterfaceWrapper) PostApiAdminConfigPagecontent(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, AdminScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiAdminConfigPagecontent(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiAdminConfigRtmpserverport operation middleware
func (siw *ServerInterfaceWrapper) PostApiAdminConfigRtmpserverport(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, AdminScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiAdminConfigRtmpserverport(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiAdminConfigServersummary operation middleware
func (siw *ServerInterfaceWrapper) PostApiAdminConfigServersummary(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, AdminScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiAdminConfigServersummary(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiAdminConfigSocialhandles operation middleware
func (siw *ServerInterfaceWrapper) PostApiAdminConfigSocialhandles(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, AdminScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiAdminConfigSocialhandles(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiAdminConfigSockethostoverride operation middleware
func (siw *ServerInterfaceWrapper) PostApiAdminConfigSockethostoverride(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, AdminScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiAdminConfigSockethostoverride(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiAdminConfigStreamkeys operation middleware
func (siw *ServerInterfaceWrapper) PostApiAdminConfigStreamkeys(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, AdminScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiAdminConfigStreamkeys(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiAdminConfigStreamtitle operation middleware
func (siw *ServerInterfaceWrapper) PostApiAdminConfigStreamtitle(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, AdminScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiAdminConfigStreamtitle(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiAdminConfigTags operation middleware
func (siw *ServerInterfaceWrapper) PostApiAdminConfigTags(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, AdminScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiAdminConfigTags(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiAdminConfigVideoCodec operation middleware
func (siw *ServerInterfaceWrapper) PostApiAdminConfigVideoCodec(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, AdminScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiAdminConfigVideoCodec(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiAdminConfigVideoStreamlatencylevel operation middleware
func (siw *ServerInterfaceWrapper) PostApiAdminConfigVideoStreamlatencylevel(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, AdminScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiAdminConfigVideoStreamlatencylevel(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiAdminConfigVideoStreamoutputvariants operation middleware
func (siw *ServerInterfaceWrapper) PostApiAdminConfigVideoStreamoutputvariants(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, AdminScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiAdminConfigVideoStreamoutputvariants(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiAdminConfigVideoservingendpoint operation middleware
func (siw *ServerInterfaceWrapper) PostApiAdminConfigVideoservingendpoint(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, AdminScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiAdminConfigVideoservingendpoint(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiAdminConfigWebserverip operation middleware
func (siw *ServerInterfaceWrapper) PostApiAdminConfigWebserverip(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, AdminScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiAdminConfigWebserverip(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiAdminConfigWebserverport operation middleware
func (siw *ServerInterfaceWrapper) PostApiAdminConfigWebserverport(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, AdminScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiAdminConfigWebserverport(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiAdminConfigWelcomemessage operation middleware
func (siw *ServerInterfaceWrapper) PostApiAdminConfigWelcomemessage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, AdminScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiAdminConfigWelcomemessage(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiAdminDisconnect operation middleware
func (siw *ServerInterfaceWrapper) PostApiAdminDisconnect(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, AdminScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiAdminDisconnect(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiAdminEmojiDelete operation middleware
func (siw *ServerInterfaceWrapper) PostApiAdminEmojiDelete(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, AdminScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiAdminEmojiDelete(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiAdminEmojiUpload operation middleware
func (siw *ServerInterfaceWrapper) PostApiAdminEmojiUpload(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, AdminScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiAdminEmojiUpload(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiAdminFollowers operation middleware
func (siw *ServerInterfaceWrapper) GetApiAdminFollowers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, AdminScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiAdminFollowers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiAdminFollowersApprove operation middleware
func (siw *ServerInterfaceWrapper) PostApiAdminFollowersApprove(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, AdminScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiAdminFollowersApprove(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiAdminFollowersBlocked operation middleware
func (siw *ServerInterfaceWrapper) GetApiAdminFollowersBlocked(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, AdminScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiAdminFollowersBlocked(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiAdminFollowersPending operation middleware
func (siw *ServerInterfaceWrapper) GetApiAdminFollowersPending(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, AdminScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiAdminFollowersPending(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiAdminHardwarestats operation middleware
func (siw *ServerInterfaceWrapper) GetApiAdminHardwarestats(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, AdminScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiAdminHardwarestats(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiAdminLogs operation middleware
func (siw *ServerInterfaceWrapper) GetApiAdminLogs(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, AdminScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiAdminLogs(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiAdminLogsWarnings operation middleware
func (siw *ServerInterfaceWrapper) GetApiAdminLogsWarnings(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, AdminScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiAdminLogsWarnings(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiAdminServerconfig operation middleware
func (siw *ServerInterfaceWrapper) GetApiAdminServerconfig(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, AdminScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiAdminServerconfig(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiAdminViewers operation middleware
func (siw *ServerInterfaceWrapper) GetApiAdminViewers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, AdminScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiAdminViewers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiAdminViewersOverTime operation middleware
func (siw *ServerInterfaceWrapper) GetApiAdminViewersOverTime(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, AdminScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiAdminViewersOverTime(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiAdminWebhooks operation middleware
func (siw *ServerInterfaceWrapper) GetApiAdminWebhooks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, AdminScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiAdminWebhooks(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiAdminWebhooksCreate operation middleware
func (siw *ServerInterfaceWrapper) PostApiAdminWebhooksCreate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, AdminScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiAdminWebhooksCreate(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiAdminWebhooksDelete operation middleware
func (siw *ServerInterfaceWrapper) PostApiAdminWebhooksDelete(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, AdminScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiAdminWebhooksDelete(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/admin/accesstokens", wrapper.GetApiAdminAccesstokens)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/admin/accesstokens/create", wrapper.PostApiAdminAccesstokensCreate)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/admin/accesstokens/delete", wrapper.PostApiAdminAccesstokensDelete)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/admin/chat/clients", wrapper.GetApiAdminChatClients)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/admin/chat/messages", wrapper.GetApiAdminChatMessages)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/admin/chat/messagevisibility", wrapper.PostApiAdminChatMessagevisibility)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/admin/chat/users/disabled", wrapper.GetApiAdminChatUsersDisabled)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/admin/chat/users/ipbans", wrapper.GetApiAdminChatUsersIpbans)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/admin/chat/users/ipbans/create", wrapper.PostApiAdminChatUsersIpbansCreate)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/admin/chat/users/ipbans/remove", wrapper.PostApiAdminChatUsersIpbansRemove)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/admin/chat/users/moderators", wrapper.GetApiAdminChatUsersModerators)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/admin/chat/users/setenabled", wrapper.PostApiAdminChatUsersSetenabled)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/admin/chat/users/setmoderator", wrapper.PostApiAdminChatUsersSetmoderator)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/admin/config/adminpass", wrapper.PostApiAdminConfigAdminpass)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/admin/config/appearance", wrapper.PostApiAdminConfigAppearance)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/admin/config/chat/disable", wrapper.PostApiAdminConfigChatDisable)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/admin/config/chat/establishedusermode", wrapper.PostApiAdminConfigChatEstablishedusermode)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/admin/config/chat/forbiddenusernames", wrapper.PostApiAdminConfigChatForbiddenusernames)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/admin/config/chat/joinmessagesenabled", wrapper.PostApiAdminConfigChatJoinmessagesenabled)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/admin/config/chat/suggestedusernames", wrapper.PostApiAdminConfigChatSuggestedusernames)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/admin/config/directoryenabled", wrapper.PostApiAdminConfigDirectoryenabled)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/admin/config/ffmpegpath", wrapper.PostApiAdminConfigFfmpegpath)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/admin/config/logo", wrapper.PostApiAdminConfigLogo)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/admin/config/name", wrapper.PostApiAdminConfigName)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/admin/config/nsfw", wrapper.PostApiAdminConfigNsfw)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/admin/config/offlinemessage", wrapper.PostApiAdminConfigOfflinemessage)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/admin/config/pagecontent", wrapper.PostApiAdminConfigPagecontent)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/admin/config/rtmpserverport", wrapper.PostApiAdminConfigRtmpserverport)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/admin/config/serversummary", wrapper.PostApiAdminConfigServersummary)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/admin/config/socialhandles", wrapper.PostApiAdminConfigSocialhandles)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/admin/config/sockethostoverride", wrapper.PostApiAdminConfigSockethostoverride)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/admin/config/streamkeys", wrapper.PostApiAdminConfigStreamkeys)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/admin/config/streamtitle", wrapper.PostApiAdminConfigStreamtitle)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/admin/config/tags", wrapper.PostApiAdminConfigTags)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/admin/config/video/codec", wrapper.PostApiAdminConfigVideoCodec)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/admin/config/video/streamlatencylevel", wrapper.PostApiAdminConfigVideoStreamlatencylevel)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/admin/config/video/streamoutputvariants", wrapper.PostApiAdminConfigVideoStreamoutputvariants)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/admin/config/videoservingendpoint", wrapper.PostApiAdminConfigVideoservingendpoint)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/admin/config/webserverip", wrapper.PostApiAdminConfigWebserverip)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/admin/config/webserverport", wrapper.PostApiAdminConfigWebserverport)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/admin/config/welcomemessage", wrapper.PostApiAdminConfigWelcomemessage)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/admin/disconnect", wrapper.PostApiAdminDisconnect)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/admin/emoji/delete", wrapper.PostApiAdminEmojiDelete)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/admin/emoji/upload", wrapper.PostApiAdminEmojiUpload)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/admin/followers", wrapper.GetApiAdminFollowers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/admin/followers/approve", wrapper.PostApiAdminFollowersApprove)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/admin/followers/blocked", wrapper.GetApiAdminFollowersBlocked)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/admin/followers/pending", wrapper.GetApiAdminFollowersPending)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/admin/hardwarestats", wrapper.GetApiAdminHardwarestats)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/admin/logs", wrapper.GetApiAdminLogs)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/admin/logs/warnings", wrapper.GetApiAdminLogsWarnings)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/admin/serverconfig", wrapper.GetApiAdminServerconfig)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/admin/viewers", wrapper.GetApiAdminViewers)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/admin/viewersOverTime", wrapper.GetApiAdminViewersOverTime)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/admin/webhooks", wrapper.GetApiAdminWebhooks)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/admin/webhooks/create", wrapper.PostApiAdminWebhooksCreate)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/admin/webhooks/delete", wrapper.PostApiAdminWebhooksDelete)
	})

	return r
}
